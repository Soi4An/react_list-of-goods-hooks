{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortField","setSortField","hasReverse","setHasReverse","hasReset","length","getResetValue","sortListGoods","goodsFrom","goods","sort","goodA","goodB","Name","localeCompare","Lenght","reverse","getPreparedGoods","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBYA,E,0DAbCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGUD,K,WAAAA,E,YAAAA,E,iBAAAA,M,KA8CL,IAAME,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,SAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAfR,SACEJ,EACAE,GAEA,SAAIF,EAAUK,OAAS,GAAKH,GAWXI,CAAcN,EAAWE,GACpCK,EA7CR,SACEC,EACAR,EACAE,GAEA,IAAMO,EAAK,YAAOD,GAqBlB,OAnBIR,GACFS,EAAMC,MAAK,SAACC,EAAOC,GACjB,OAAQZ,GACN,KAAKL,EAASkB,KACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKjB,EAASoB,OACZ,OAAOJ,EAAMN,OAASO,EAAMP,OAE9B,QACE,OAAO,MAKXH,GACFO,EAAMO,UAGDP,EAmBeQ,CACpBrB,EACAI,EACAE,GAQF,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWlB,IAAcL,EAASkB,KAC9B,iBACA,0BACJO,QAAS,kBAAMnB,EAAaN,EAASkB,OALvC,iCAUA,wBACEM,KAAK,SACLD,UAAWlB,IAAcL,EAASoB,OAC9B,oBACA,6BACJK,QAAS,kBAAMnB,EAAaN,EAASoB,SALvC,4BAUA,wBACEI,KAAK,SACLD,UAAWhB,EACP,oBACA,6BACJkB,QAAS,kBAAMjB,GAAeD,IALhC,qBAUCE,GACC,wBACEe,KAAK,SACLD,UAAU,4BACVE,QA1CS,WACjBjB,GAAc,GACdF,EAAaN,EAASI,UAqChB,sBAUJ,6BACGQ,EAAcc,KAAI,SAAAC,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC3HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.996e9207.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport React, { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum SortType {\n  Default = '',\n  Name = 'name',\n  Lenght = 'length',\n}\n\nfunction getPreparedGoods(\n  goodsFrom: string[],\n  sortField: SortType,\n  hasReverse: boolean,\n) {\n  const goods = [...goodsFrom];\n\n  if (sortField) {\n    goods.sort((goodA, goodB) => {\n      switch (sortField) {\n        case SortType.Name:\n          return goodA.localeCompare(goodB);\n\n        case SortType.Lenght:\n          return goodA.length - goodB.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (hasReverse) {\n    goods.reverse();\n  }\n\n  return goods;\n}\n\nfunction getResetValue(\n  sortField: SortType,\n  hasReverse: boolean,\n) {\n  if (sortField.length > 0 || hasReverse) {\n    return true;\n  }\n\n  return false;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.Default);\n  const [hasReverse, setHasReverse] = useState(false);\n\n  const hasReset = getResetValue(sortField, hasReverse);\n  const sortListGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    hasReverse,\n  );\n\n  const deleteSort = () => {\n    setHasReverse(false);\n    setSortField(SortType.Default);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortField === SortType.Name\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={() => setSortField(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortField === SortType.Lenght\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={() => setSortField(SortType.Lenght)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={hasReverse\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={() => setHasReverse(!hasReverse)}\n        >\n          Reverse\n        </button>\n\n        {hasReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={deleteSort}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortListGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}